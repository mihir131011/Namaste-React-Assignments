Assignment - 2

Q - 1 What is NPM ?

Ans : Any project that is huge and are covering many dimensions needs to have many dependencies as all the features cannot be provided by any frameworks or library, so in order to manage dependencies or package in the project, we need to have the package manager, in case with javascript we have npm. 

It configures all required things and on initialising it, it  provides us package.json.

A package manager keeps the complete track of all the dependencies and the version of it which is currently being used in the project.

Q - 2 What is `Parcel/Webpack`? Why do we need it?

Ans : In order to build the production ready application we need to perform many tasks like minificaitons and optimisations and many other tasks which helps the code to perform well on the production server, many out of all  the task are performed by the bundlers.

Examples of Bundlers

1. Parcel
2. Vite
3. Webpack 
4. Browserify
5. FuseBox

All these provides similar functionalities in order to build a production ready apps
Other functionalities

- HMR : Hot Module Replacement
- File Watcher Algorithms - C++
- Building
- Minification
- Cleaning the code
- Dev and production build
- Super Fast build algorithm
- Image Optimisation
- Caching while development
- Compression
- Compatible with older versions of browsers
- It adds polyfills
- HTTPS on dev
- Port numbers
- Consistent Hashing Algorithms
- Zero Config Bundlers

Q - 3 What is `.parcel-cache`?

The .cache folder (or .parcel-cache in parcel v2) stores information about your project when parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyze everything from scratch. It's a key reason why parcel can be so fast in development mode .

Q - 4  What is `npx` ?

Ans :  It is an npm package runner that can execute any package that you want from the npm registry without even installing that package. The npx is useful during a single time use package. If you have installed npm below 5.2.0 then npx is not installed in your system. 

Q - 5 What is difference between `dependencies` vs `devDependencies`  ? 

Ans : Dependencies and Dev Dependencies  becomes different on the ground of execution, use of environment and scope of need. We need to have devDependencies only in the development environment as it's requirement in the production environment is none, whereas in the normal dependencies are installed with a goal that it would be worked in local, development and production.

Q  - 6  What is Tree Shaking?

Ans :  Tree shaking, also known as dead code elimination, is the practice of removing unused code in your production build. It's important to ship as little code to your end-users as possible. By statically analyzing our source code, we can determine what's not being used and exclude it from our final bundle.

Q - 7  What is Hot Module Replacement?

Ans :  Hot Module Replacement (HMR) improves the development experience by automatically updating modules in the browser at runtime without needing a whole page refresh. This means that application state can be retained as you change small things. Parcel's HMR implementation supports both JavaScript and CSS assets.

Q - 8 List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.

- HMR : Hot Module Replacement
- File Watcher Algorithms - C++
- Building
- Minification
- Cleaning the code

1. HMR :   Hot Module Replacement (HMR) improves the development experience by automatically updating modules in the browser at runtime without needing a whole page refresh.
2. File Watcher Algorithms : There are file watcher algos which constantly check which files are being updated which further is being.
3. It provides the production ready build, which we can share and test as well. It  can also provide us the build which has https protocol.
4. Minificaiton: Parcel includes minifiers for JavaScript, CSS, HTML, and SVG out of the box. Minification reduces the file size of your output bundles by removing whitespace, renaming variables to shorter names, and many other optimizations.
5. Clearing the console :  Parcel or any other bundler, clears the unnecessary code which is not used in the produnction server.

Q - 8 What is `.gitignore`? What should we add and not add into it?

Ans :  .gitignore is a special file which is required in the project to tell the git that which are the files that need not te be tracked, meanwhile also need not to be on the git repository, so we put all those file names in the .gitignore file.

Q - 9 What is the difference between `package.json` and `package-lock.json ? 

Ans : 

package.json contains basic information about the project.
package.lock.json describes the exact tree that was generated to allow subsequent installs to have the identical tree.

package.json is mandatory for every project.
package.lock.json is automatically generated for those operations where npm modifies either node_modules tree or package.json.

package.json records important metadata about the project.
package.lock.json allows future devs to install the same dependencies in the project.

package.json contains information such as name, description, author, script, and dependencies.
package.lock.json contains the name, dependencies, and locked version of the project. 


Q - 10 Why should I not modify `package-lock.json`?

Ans : Because it contains the exact version of the dependencies that are used in the project. If the version of that would be changed, then there could come the errors on the server.

Q - 11 - What is `node_modules` ? Is it a good idea to push that on git?

Ans : node_modules contains the complete code of all the transitive dependencies that are required of the execution.
We need not to install as they are very heavy peice of code and we can easily install by the command of npm install, so we need no to push the node_modules on the git repository.

Q - 12  What is the `dist` folder?

Ans : dist folder contains the minified code that is to be required on the production server.

Q - 13 What is `browserlists` ? 

Ans : It is the declaration to the bundlers that minify the code that works in atleast the declared browserlist.